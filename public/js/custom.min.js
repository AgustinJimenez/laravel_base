var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function App() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var template_container_id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "#template-content-container";
    var template_refresh_button_id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "#template-refresh-button";
    var template_back_button_id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "#template-back-button";

    var app = this;
    $.fn.dataTable.ext.errMode = 'none';
    app.config = config;
    app.debug = debug;
    app.response = null;
    app.datatables_list = [];
    app.template_content_container = $(template_container_id);
    app.buttons = {
        refresh: $(template_refresh_button_id),
        back: $(template_back_button_id)
    };
    app.visited_urls = [];
    app.params = {};
    app.refresh_datatables = function () {
        return app.datatables_list.forEach(function (table) {
            return table.draw();
        });
    };
    app.visited_urls.get_last_url_visited = function () {
        return app.visited_urls.slice(-1)[0];
    };
    /*
    {
        if( app.debug )
            console.log("LAST URL=", app.visited_urls.slice(-1)[0]);
          return app.visited_urls.slice(-1)[0];
    };
    */

    app.buttons.refresh.show_reload_animation = function () {
        return app.buttons.refresh.children("i").addClass('fa-spin');
    };
    app.buttons.refresh.stop_reload_animation = function () {
        return app.buttons.refresh.children("i").removeClass('fa-spin');
    };
    app.visited_urls.has_urls = function () {
        return app.visited_urls.length > 1;
    };

    app.visited_urls.add_visited_url = function (url) {

        if (url !== app.visited_urls.get_last_url_visited()) {
            app.visited_urls.push(url);

            if (app.debug) console.log("ADDING URL=(" + url + ") TO VISITED-URLS-LIST===>", app.visited_urls);
        }
    };

    app.visited_urls.add_visited_url(window.location.href);

    app.alert = function (message) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'red';
        return $.alert({
            title: 'AVISO',
            content: '<h4>' + message + "</h4>",
            type: type, // 'blue', 'red'
            backgroundDismiss: true
        });
    };

    app.confirm = function () {
        var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'blue';
        var accept_callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
        var cancel_callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
        var accept_text = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'OK';
        var cancel_text = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'CERRAR';
        var accept_btn_class = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'btn-default';
        var cancel_btn_class = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'btn-default';
        var title = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 'CONFIRMACIÃ“N';

        if (app.debug) console.log('provider_confirm(', content, type, accept_callback, cancel_callback, accept_text, cancel_text, accept_btn_class, cancel_btn_class, title);
        //'blue', 'red'
        $.confirm({
            title: title,
            content: content,
            backgroundDismiss: true,
            type: type,
            buttons: {
                accept: {
                    text: accept_text,
                    btnClass: accept_btn_class,
                    action: accept_callback
                },
                cancel: {
                    text: cancel_text,
                    btnClass: cancel_btn_class,
                    action: cancel_callback
                }
            }
        });
    };

    app.response_error_handler = function () {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "default";

        switch (type) {
            case "default":

                var errors = "";
                if (app.response != undefined && app.response.error == true) if (app.response.messages != undefined) if (typeof app.response.messages == "string") app.alert(app.response.messages);else if (_typeof(app.response.messages) == "object") {
                    for (var key in app.response.messages) {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = app.response.messages[key][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var message = _step.value;

                                errors += "\n- " + message;
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }app.alert(errors);
                } else if (app.response != undefined && app.response.messages != undefined) app.alert(app.response.messages, 'blue');else app.alert("Ocurrio un error inesperado.");

                break;
            default:
                app.alert("Ocurrio un error inesperado.");

        }
    };

    app.http = function () {
        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'GET';
        var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

        type = type.toUpperCase();

        if (app.config.csrf_token != undefined) headers['X-CSRF-TOKEN'] = app.config.csrf_token;

        if (type == 'DELETE' || type == 'PUT') {
            params['_method'] = type;
            type = 'POST';
        }

        if (app.debug) console.log("HTTP SENDING===>", 'type=', type, 'headers=', headers, 'url=', url, 'params=', params, "callback=", callback);

        app.buttons.refresh.show_reload_animation();

        $.ajax({
            type: type,
            headers: headers,
            url: url,
            data: params,
            success: function success(data, textStatus, jQxhr) {
                app.response = data;

                if (app.debug) console.log("GETTING", app.response);

                app.response_error_handler();

                if (type == "GET") app.visited_urls.add_visited_url(url);

                app.buttons.refresh.stop_reload_animation();

                if (callback != null) callback();else app.actions.refresh_page();
            },
            error: function error(jqXhr, textStatus, errorThrown) {
                app.response = jqXhr.responseJSON;
                app.response_error_handler();

                if (app.debug) console.log("ERROR: jqXhr ===> ", jqXhr, "ERROR: textStatus ===> ", textStatus, "ERROR: errorThrown ===> ", errorThrown);

                app.buttons.refresh.stop_reload_animation();
            }
        });
    };

    $(document).on('click', "a[href!='#']", function (event) {
        var clicked_link = $(this).attr("href");

        if (app.debug) console.log("LINK CLICKED!!!", clicked_link);

        app.http(clicked_link, app.actions.refresh_content);

        event.preventDefault();
    });

    app.buttons.refresh.click(function (event) {
        return app.http(app.visited_urls.get_last_url_visited(), app.actions.refresh_content);
    });

    app.buttons.back.click(function (event) {
        app.visited_urls.pop();
        app.http(app.visited_urls.get_last_url_visited(), app.actions.refresh_content);
    });

    app.actions = {
        delete_ajax: function delete_ajax(route) {
            return app.confirm("Desea eliminar el registro?", "red", function () {
                app.http(route, null, {}, 'DELETE');
            });
        },
        refresh_content: function refresh_content() {
            app.template_content_container.stop().html(app.response);
            $("input[type=text]").each(function () {
                $(this).attr("autocomplete", "off").attr("oninvalid", "this.setCustomValidity('Por favor, completar el campo')").attr("oninput", "setCustomValidity('')");
            });
            $('input').iCheck({
                checkboxClass: 'icheckbox_flat-blue',
                radioClass: 'iradio_flat-blue',
                increaseArea: '60%' // optional
            });
        },
        refresh_page: function refresh_page() {
            var last_url = app.visited_urls.get_last_url_visited();

            if (last_url != undefined) app.http(last_url, app.actions.refresh_content);
        }

    };

    $(document).on('submit', 'form', function (event) {
        if ($(this).attr('id') != 'template-form-logout') {
            event.preventDefault();
            app.params = {};
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = $(this).serializeArray()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var field = _step2.value;

                    app.params[field.name] = field.value;
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            app.http($(this).attr('action'), app.actions.refresh_content, app.params, $(this).attr("method"));
        }
    });

    document.onkeydown = function () {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;

        if (e.keyCode == 116) {
            e.preventDefault();
            app.actions.refresh_page();
        }
    };

    app.set_dropzone = function () {
        var id_selector_submit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "#btn-submit-dropzone";

        console.log("hello dropzone");
        Dropzone.options.myDropzone = {
            autoProcessQueue: false,
            uploadMultiple: true,
            init: function init() {
                var submitBtn = document.querySelector(id_selector_submit);
                myDropzone = this;

                submitBtn.addEventListener("click", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    myDropzone.processQueue();
                });

                this.on("complete", function (files) {
                    return myDropzone.removeFile(files);
                });
                this.on("success", function () {
                    return myDropzone.processQueue.bind(myDropzone);
                });
            }
        };
    };

    app.set_datatable = function () {
        var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [{ data: 'actions', name: 'actions', orderable: false, searchable: false }];
        var request_handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (request) {};
        var response_handler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (response) {
            return response.data;
        };
        var selector = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '.data-table';
        var order = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [[0, "asc"]];

        var _$$DataTable;

        var default_datas_count = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 10;
        var tool_bar = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "<'toolbar'><'row'<'col-xs-12'<'col-xs-6'l><'col-xs-6'p>>r><'row'<'col-xs-12't>><'row'<'col-xs-12'<'col-xs-6'i><'col-xs-6'p>>>";


        var new_datatable = $(selector).DataTable((_$$DataTable = {
            dom: tool_bar,
            deferRender: true,
            processing: true,
            serverSide: true,
            order: order,
            paginate: true,
            lengthChange: true,
            iDisplayLength: default_datas_count,
            filter: true,
            sort: true,
            info: true,
            autoWidth: true
        }, _defineProperty(_$$DataTable, "paginate", true), _defineProperty(_$$DataTable, "initComplete", function initComplete() {}), _defineProperty(_$$DataTable, "ajax", {
            url: source,
            type: "GET",
            headers: { 'X-CSRF-TOKEN': app.csrf_token },
            data: request_handler,
            dataSrc: response_handler
        }), _defineProperty(_$$DataTable, "columns", columns), _defineProperty(_$$DataTable, "language", {
            processing: "Procesando...",
            search: "Buscar",
            lengthMenu: "Mostrar _MENU_ Elementos",
            info: "Mostrando de _START_ a _END_ registros de un total de _TOTAL_ registros",
            //infoEmpty:      "Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments",
            infoFiltered: ".",
            infoPostFix: "",
            loadingRecords: "Cargando Registros...",
            zeroRecords: "No existen registros disponibles",
            emptyTable: "No existen registros disponibles",
            paginate: {
                first: "Primera",
                previous: "<i class='fa fa-chevron-left'></i>",
                next: "<i class='fa fa-chevron-right'></i>",
                last: "Ultima"
            }
        }), _$$DataTable));

        app.datatables_list.push(new_datatable);
    };
}